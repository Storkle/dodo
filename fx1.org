#+TITLE: FX1
#+Author: Seth Burleigh
#+Date: 
#+Options: toc:nil
#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \usepackage{subfigure}
#+LaTeX_CLASS: smarticle
#+LaTeX_HEADER: \usepackage{courier}
#+LaTeX_HEADER: \usepackage{libertine}
#+LaTeX_HEADER: \usepackage{sectsty}
#+LaTeX_HEADER: \sectionfont{\normalfont\scshape}
#+LaTeX_HEADER: \subsectionfont{\normalfont\itshape}
 
\newpage
\setcounter{tocdepth}{3}
\tableofcontents
\newpage

* Ch2 Narratives
** frame based narrative language
+ holds :sit :prop = Proposition PROP is true in situation SIT
+ justifies :action :hyp = ACTION is justified by hypothesis HYP
+ believes :actor :prop = ACTOR believes proposition PROP is true
+ observes :actor :prop = ACTOR observes proposition PROP to be true
+ expects :actor :prop = ACTOR expects proposition PROP to be true soon
+ observes-class :actor :class = ACTOR observes an entity of class CLASS
+ desires :actor :prop = ACTOR desires that proposition PROP be true
+ intends :actor :prop = ACTOR intends to take ACTION
+ does :actor :prop = ACTOR takes ACTION in the simulator
+ infers :actor :sit = ACTOR infers that proposition PROP is true
+ plans :actor :plan = ACTOR has the plan PLAN
+ engages :actor :critic = ACTOR recently engaged the criticism CRIT
 
These frames are represented in EM-ONE as sets of *ground binary predicates*
that capture the set of slot relations asserted by each frame. 
In addition to binary predicates for the frame slots shown in Table 2‑1, 
the EM-ONE frame language includes supplementary predicates 
for representing the compositional structure of situations and events, 
the temporal orderings that hold between them, and their 
causal interdependencies. These predicates are listed in Table 2-2.
** example parsing
#+begin_src clojure
  (defnarrative green-grasps-stick-from-pink
    (desires green (is-holding green stick) [1])
    (sequential
      (observes green (is-holding pink stick))
      (does green (grasps green stick) [2])
      (believes pink (desires green (is-holding green stick)) [3])
      (does pink (releases pink stick) [4]))
    (causes [1] [2])
    (causes [2] [3])
    (causes [3] [4]))
  
  (subsit TOPSIT_19457 SIT_19459)
  (truth SIT_19459 true)
  (isa SIT_19459 situation)
  (type SIT_19459 desires)
  (actor SIT_19459 green)
  (truth SIT_19460 true)
  (isa SIT_19460 situation)
  (type SIT_19460 is-holding)
  (subsit SIT_19459 SIT_19460)
  (subject SIT_19460 green)
  (object SIT_19460 stick)
  (prop SIT_19459 SIT_19460)
  (isa SIT_19461 situation)
  (subsit TOPSIT_19457 SIT_19461)
  (truth SIT_19462 true)
  (isa SIT_19462 situation)
  (type SIT_19462 observes)
  (subsit SIT_19461 SIT_19462)
  (actor SIT_19462 green)
  (truth SIT_19463 true)
  (isa SIT_19463 situation)
  (type SIT_19463 is-holding)
  (subsit SIT_19462 SIT_19463)
  (subject SIT_19463 pink)
  (object SIT_19463 stick)
  (prop SIT_19462 SIT_19463)
  (truth SIT_19464 true)
  (isa SIT_19464 situation)
  (type SIT_19464 does)
  (subsit SIT_19461 SIT_19464)
  (actor SIT_19464 green)
  (truth SIT_19465 true)
  (isa SIT_19465 situation)
  (type SIT_19465 grasps)
  (subsit SIT_19464 SIT_19465)
  (actor SIT_19465 green)
  (object SIT_19465 stick)
  (prop SIT_19464 SIT_19465)
  (follows SIT_19462 SIT_19464)
  (truth SIT_19466 true)
  (isa SIT_19466 situation)
  (type SIT_19466 believes)
  (subsit SIT_19461 SIT_19466)
  (actor SIT_19466 pink)
  (truth SIT_19467 true)
  (isa SIT_19467 situation)
  (type SIT_19467 desires)
  (subsit SIT_19466 SIT_19467)
  (actor SIT_19467 green)
  (truth SIT_19468 true)
  (isa SIT_19468 situation)
  (type SIT_19468 is-holding)
  (subsit SIT_19467 SIT_19468)
  (subject SIT_19468 green)
  (object SIT_19468 stick)
  (prop SIT_19467 SIT_19468)
  (prop SIT_19466 SIT_19467)
  (follows SIT_19464 SIT_19466)
  (truth SIT_19469 true)
  (isa SIT_19469 situation)
  (type SIT_19469 does)
  (subsit SIT_19461 SIT_19469)
  (actor SIT_19469 pink)
  (truth SIT_19470 true)
  (isa SIT_19470 situation)
  (type SIT_19470 releases)
  (subsit SIT_19469 SIT_19470)
  (actor SIT_19470 pink)
  (object SIT_19470 stick)
  (prop SIT_19469 SIT_19470)
  (follows SIT_19466 SIT_19469)
  (causes SIT_19462 SIT_19464)
  (causes SIT_19464 SIT_19466)
  (causes SIT_19466 SIT_19469)
#+end_src

After all the statements have been parsed, scaffolding frames are added
to tie them together into a single narrative. Each statement’s 
frame is embedded within a situation frame using a subsit relation. 
Each these situation frames are themselves embedded within the larger
narrative frame also by using subsit relations. If frames are within 
a statement whose head is termed sequential, then between each adjacent 
pair of frames is asserted the follows temporal relationship.

** binary predicates
(subsit SIT SUBSIT) The situation SUBSIT holds during the situation SIT
(type X TYPE) The entity X is of type TYPE (e.g. grasps or believes)
(isa X CLASS) The entity X is of class CLASS (e.g. object or situation)
(truth SIT TRUTH) The situation SIT has TRUTH value (can be true or false)
(follows S1 S2) The situation S1 is temporally followed by situation S2
(causes S1 S2) The situation S1 causes the situation S2
(implies S1 S2) The situation S1 implies the situation S2
(jointly S1 S2) The situation S1 is true jointly with the situation S2
(dependency S1 S2) The situation S2 has a dependency on the situation S1
(requirement S1 S2) The situation S2 requires situation S1
;;;;;
(toogether ..l)
(sequential ..) 


** commonsense from narratives
(defnarrative green-grasps-stick-from-pink
  (desires green (is-holding green stick) [1])
  (sequential
    (observes green (is-holding pink stick))
    (does green (grasps green stick) [2])
    (believes pink (desires green (is-holding green stick)) [3])
    (does pink (releases pink stick) [4]))
  (causes [1] [2])
  (causes [2] [3])
  (causes [3] [4]))
 
Embedded in the story are the following default rules about the world:
 
·      If you want to be holding an object then you should try to grasp it.
·      If you grasp an object then someone may infer that you want to hold the object.
·      If someone believes that you want to grasp an object they are holding, then they might choose to release the object.
 
This type of generalizing from a single example is not always reliable.

** exctraction thingies
auxiliary extraction predicates defined to simplify extracting useful knowledge
#+begin_src clojure
  ;;Relations-Hold-Together. Certain relations between objects are often observed to hold simultaneously.
  
  (defextractor (relations-hold-together REL1 REL2)
    (together
     (observes ACTOR (REL1 SUBJ OBJ) [1])
     (observes ACTOR (REL2 SUBJ OBJ) [2]))
    (jointly [1] [2]))
  ;;Relation-Causes-Relation. A given relation holding between two objects often causes another relation to hold in the following situation.
  (defextractor (relation-causes-relation REL1 REL2)
    (sequential
     (observes ACTOR (REL1 SUBJ OBJ) [1])
     (observes ACTOR (REL2 SUBJ OBJ) [2]))
    (causes [1] [2]))
  
  ;;Effect-Of-Action-On-Object-Property. Taking an action on an object causes a property of the object to change to a different value.
  
  (defextractor (effect-of-action-on-object-property ACTION PROP OBJ VALUE1 VALUE2)
    (sequential
     (together
      (observes ACTOR (PROP OBJ VALUE1))
      (does ACTOR (ACTION ACTOR OBJ))
      [1])
     (observes ACTOR (PROP OBJ VALUE2) [2]))
    (prolog (not (= VALUE1 VALUE2)))
    (causes [1] [2]))
  
  
  ;;Action-Achieves-Relation. Taking an action involving two objects causes a relation between those objects to come to hold true.
  
  (defextractor (action-achieves-relation ACTION REL SUBJ OBJ)
    (sequential
     (does ACTOR (ACTION ACTOR SUBJ OBJ) [ACTION])
     (observes ACTOR (REL SUBJ OBJ) [RESULT]))
    (causes [ACTION] [RESULT]))
  
  ;;Effect-of-Action-Is-New-Object. Taking an action results in the creation of a new object of a given type.
  
  (defextractor (effect-of-action-is-new-object ACTION OBJECT_TYPE)
    (sequential
     (together
      (not (observes-class ACTOR OBJECT_TYPE))
      (does ACTOR (ACTION ACTOR))
      [1])
     (observes-class ACTOR OBJECT_TYPE [2]))
    (causes [1] [2]))
  
  ;;Action-Requires-Precondition. For an action to successfully produce a certain effect relation between two objects, a given relation must already hold between those objects.
  
  (defextractor (action-requires-precondition ACTION PRECOND SUBJ OBJ)
    (sequential
     (together
      (observes ACTOR (PRECOND SUBJ OBJ))
      (does ACTOR (ACTION ACTOR SUBJ OBJ))
      [1])
     (observes ACTOR (EFFECT SUBJ OBJ) [2]))
    (requirement [1] [2]))
  
  ;;Actor-Desires-Situation. An actor may desire a situation in which a particular relation holds between two objects.
  
  (defextractor (actor-desires-situation ACTOR REL SUBJ OBJ)
    (desires ACTOR (observes ACTOR (REL SUBJ OBJ))))
#+end_src

* Ch3 Mental Critics
** Reactive Critics
This reactive critic proposes a course of action by recognizing a difference between the currently observed situation and the currently active goals, and recognizing that in one of the narratives in the narrative corpus this difference was reduced by applying a particular method. No further deliberation is involved, and in fact, it is possible to encode a wide variety of behaviors purely by applying reactive critics alone.
** Deliberative Critics
The critics in the deliberative layer *operate on representations of the world and of the actions proposed by the reactive layer*. 
Deliberative critics *operate on narrative hypotheses*, which are identical 
to the narratives in the EM-ONE narrative corpus except that they are  
*developed and elaborated during the course of deliberation*. 
Deliberative critics can be used to *assess hypotheses according to criteria*
such as whether the actors in them are *taking actions that make sense with respect to their goals*
or whether the *hypotheses are consistent with known commonsense narratives.*
 Deliberative critics can ameliorate these critical 
assessments by *producing new hypotheses that are improvements* over
 existing ones. These *improvements are often made by drawing analogies*
to narratives from the EM-ONE narrative corpus.

** Reflective Critics
The critics in the reflective layer *operate on traces of recent deliberation and action*
, in other words, representations of the activity within the mind of the 
system itself. Reflective critics *recognize problems* in the system’s recent
 activities including having made *mistaken assumptions* and 
*jumping to inappropriate conclusions*. These critics are capable of 
*modifying the critics responsible for making these mistakes*
 so that these mistakes are not repeated.

** META-MANAGEMENT
The critics in the meta-managerial layer have *global access* to all the other
 critics in the system and their activities. Metacritics *select*
 collections of critics, possibly encompassing entire layers, based on
 *assessments of the present situation and the progress* the system has made
 so far. For example, a metacritic might select the reactive layer if 
no action has been proposed and there are many pressing goals.

** CRITIC-L SYSTEM
 selection, evaluation, and applicatio

keeps track of the system’s *current situation and desires*, 
the set of narrative hypotheses that the deliberative layer
 is presently *considering*, the record of *recent observations* made
 by the reactive layer and *actions* that were taken in the world, 
and the *history of all activations of mental critics*, including 
any *modifications* they might have made to mental state. 
In addition, CRITIC-L manages the *storage and retrieval of the narratives*
of the EM-ONE narrative corpus. 

Critics are implemented as *large pattern matching* rules based on the 
same representation as the EM-ONE narratives. Critics are typically 
implemented as case-based reasoning rules, in that while some of 
their *antecedent elements match against the present conditions*, 
other elements *match against narratives in the narrative corpus*, 
and the solutions that critics propose may involve elements drawn 
from both of these sources.
 

** Critics
prolog is only there to provide a backward chaining pattern matching
 functionality, so that critics can include recursively matched auxiliary
 predicates (including the auxiliary extraction predicates described in 
Chapter 2) as pattern elements.

layer*symptom*bug=>repair
layer*symptom=>repair
layer=>repair
layer*symptom*bug
layer*symptom

running/applying

.      Narratives is the database of the EM-ONE narrative corpus. For the moment, most critics draw from only a single narrative at a time, but it is possible to define a critic that draws elements from two or more EM-ONE narratives.
 
·      Conditions is the database of facts that represents the presently perceived sensory data, as well as the current beliefs, desires, and intentions of the actors.
 
·      Hypotheses is the database of narrative hypotheses that is used by the deliberative layer while making inferences.
 
·      Reflections is the database that stores the trace of invocations of critics and their effects.

Each of these databases is further divided into a collection of contexts, 
which are each a set of facts treated as a unit.

#+begin_src clojure
(defcritic (reactive*difference-between-conditions-and-desires=>propose-action N)
  (in conditions current-conditions
    (observes :actor ACTOR :prop (not (REL :subject SUBJ :object OBJ)))
    (desires :actor ACTOR
             :prop (observes :actor ACTOR
                             :prop (REL :subject SUBJ :object OBJ))))
  (in narratives N
    (sequential
      (observes :actor ACTOR2 :prop (not (REL :subject SUBJ2 :object OBJ2)))
      (does :actor ACTOR2
            :prop (ACTION :actor ACTOR2 :object SUBJ2 :target OBJ2) [1])
      (observes :actor ACTOR2 :prop (REL :subject SUBJ2 :object OBJ2) [2]))
    (causes [1] [2]))
  (=>)
  (in conditions current-conditions
    (assert
      (intends :actor ACTOR
               :prop (ACTION :actor ACTOR :object SUBJ :target OBJ) [[S]]))
    (assert (subsit current-conditions [[S]]))))
#+end_src



** Deliberation helping critics
·      They may not be able to retrieve a solution to the given problem.
·      They may retrieve multiple solutions and not know how to choose between them.
·      They may propose an action, but the action fails because adequate conditions for the action’s success do not hold. Determining whether adequate conditions hold is sometimes called the qualification problem.
·      They may propose an action, and that action succeeds at achieving its immediate primary effect, but additional undesirable consequences ensue as well. Determining the important effects of actions is sometimes called the ramification problem.
